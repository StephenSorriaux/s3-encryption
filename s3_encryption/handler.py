import logging

from s3_encryption import crypto
from s3_encryption.envelope import EncryptionEnvelopeV2
from s3_encryption.client.base import EncryptionMode


logger = logging.getLogger(__name__)


class EncryptionHandler(object):

    _data_cipher = None
    _data_key_cipher = None

    def __init__(self, provider, encryption_mode):
        self.provider = provider
        self.encryption_mode = encryption_mode

        # Autogenerated key for data cipher
        self._data_cipher = crypto.content_from_encryption_mode(self.encryption_mode)()

        # Use master key for kek
        self._data_key_cipher = crypto.kek_from_encryption_mode(self.encryption_mode)(
            self.provider.key_for(self.provider.encryption_materials)
        )

    def actions_for_cipher(self):
        return self._data_cipher.used_with

    def build_request_context(self, context):
        context['body'] = self._data_cipher.encrypt(context['raw_body'])
        context['envelope'] = self.envelope
        return context

    def update_iv(self, iv):
        '''
        Updates the IV of the underlying cipher used to encrypt object content
        '''
        logging.info('Setting new IV value for data cipher')
        self._data_cipher.iv = iv

    @property
    def envelope(self):
        logging.info('Generating envelope v2')
        envelope = EncryptionEnvelopeV2(self.provider.encryption_materials)
        envelope.iv = self._data_cipher.metadata_iv
        envelope.key = self._data_key_cipher.encrypt(self._data_cipher.key)
        envelope.cek_alg = self._data_cipher.name
        envelope.wrap_alg = self._data_key_cipher.name
        envelope.tag_len = self._data_cipher.tag_len
        return envelope

    def encrypt(self, data, **kwargs):
        logging.info(
            'Encrypting %i bytes of data with %s',
            len(data),
            self._data_cipher.name
        )
        return self._data_cipher.encrypt(data, **kwargs)


class DecryptionHandler(object):

    _data_cipher = None
    _data_key_cipher = None

    def __init__(self, provider, encryption_mode):
        self.provider = provider
        self.encryption_mode = encryption_mode

    def actions_for_cipher(self):
        return self._data_cipher.used_with

    def decrypt(self, data):
        if self._data_cipher is None:
            raise ValueError('Build the cipher from the envelope first')

        logging.info(
            'Decrypting %i bytes of data with %s',
            len(data),
            self._data_cipher.name
        )
        return self._data_cipher.decrypt(data)

    def build_from_metadata(self, obj_metadata):
        logger.info('Building ciphers from object metadata')
        envelope = EncryptionEnvelopeV2()
        envelope.from_metadata(obj_metadata)

        # Use master key for kek
        self._data_key_cipher = crypto.kek_from_metadata(obj_metadata)(
            self.provider.key_for(self.provider.encryption_materials)
        )

        self._data_cipher = crypto.content_from_metadata(obj_metadata)(
            key=self._data_key_cipher.decrypt(envelope.key),
            iv=envelope.iv
        )

    def build_from_metadata_and_decrypt(self, metadata, data):
        self.build_from_metadata(metadata)
        return self.decrypt(data)
